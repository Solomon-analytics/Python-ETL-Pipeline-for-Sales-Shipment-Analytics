=================================================================================================
                         Product Performance Analysis
=================================================================================================

# Convert order date to datetime and extract year/month

df_gold_fact_sales_orders["order_creation_date"] = pd.to_datetime(df_gold_fact_sales_orders["order_creation_date"])
df_gold_fact_sales_orders["year"] = df_gold_fact_sales_orders["order_creation_date"].dt.year
df_gold_fact_sales_orders["month"] = df_gold_fact_sales_orders["order_creation_date"].dt.month

=================================================================================================
   Product Category Revenue performance
=================================================================================================
## products category revenue distribution
df_gold_fact_sales_orders.groupby(["product_category"])["net_order_value_usd"].sum().sort_values(ascending = False).plot(kind = "bar")
plt.xlabel("net_order_value_usd (in million $)")
plt.ylabel("product category")
plt.title("Product Category Revnue Distribution")
plt.show()

# Revenue generated across each of the product category (Aggregated by : Year)
df_products_category_performance = (
    df_gold_fact_sales_orders.groupby(["year","product_category"])["net_order_value_usd"]
    .sum()
    .reset_index()
)

# what is the overall average revenue generated across years recorded
df_products_category_performance["overall_avg"] = (
    df_products_category_performance.groupby("year")["net_order_value_usd"].transform("mean")
)


# net order value usd vs overall average categorisation

df_products_category_performance["performance_flag"] = np.where(
    df_products_category_performance["net_order_value_usd"] > df_products_category_performance["overall_avg"],
    "Above Average", "Below Average"
)

=============================================================================================
# visual representation of product_category performance vs the overall revenue average
=============================================================================================

# a. create a pivot table to detetmine what the average is for each products category for each year?
heatmap_data = df_products_category_performance.pivot(
    index="product_category",
    columns="year",
    values="net_order_value_usd"
)

# b. compare the average each product category generated to the overall average
flag_mask = (heatmap_data <
             df_products_category_performance.groupby("year")["overall_avg"].first().values)

# c. Pivot data for heatmap
heatmap_data =  df_products_category_performance.pivot(
    index="product_category",
    columns="year",
    values="net_order_value_usd")


# d. Create heatmap
plt.figure(figsize=(12, 6))
sns.heatmap(
    heatmap_data,
    annot=True, fmt=".0f",
    cmap="RdYlGn",  # green for high, red for low
    cbar_kws={'label': 'Revenue Benchmark'}
)

plt.title("Product category Revenue vs Overall Average Benchmark")
plt.ylabel("Product Name")
plt.xlabel("Year")
plt.show()

=================================================================================================
   Product Name Revenue performance
=================================================================================================

# what is the revenue generated for each of the product name across all years
df_products_name_performance = (
    df_gold_fact_sales_orders.groupby(["year","product_name"])["net_order_value_usd"]
    .sum()
    .reset_index()
)

df_products_name_performance

# what is the overall average revenue generated for all product names for each year?
df_products_name_performance["avg_overall"] = (df_products_name_performance.groupby("year")["net_order_value_usd"].transform("mean"))

df_products_name_performance

# how is the overall average compared to the revenue generated by each of the product name for each year?
df_products_name_performance["prd_name_perf_flag"] = np.where(
    df_products_name_performance["net_order_value_usd"] > df_products_name_performance["avg_overall"],
    "Above Average", "Below Average"
)

df_products_name_performance


============================================================================================
 visual representation of product_name performance vs the overall revenue average
============================================================================================

# a. create a pivot table to detetmine what the average is for each products for each year?
heatmap_data = df_products_name_performance.pivot(
    index="product_name",
    columns="year",
    values="net_order_value_usd"
)

# b. compare the average each product generated to the overall average
flag_mask = (heatmap_data <
             df_products_name_performance.groupby("year")["avg_overall"].first().values)

# c. Pivot data for heatmap
heatmap_data =  df_products_name_performance.pivot(
    index="product_name",
    columns="year",
    values="net_order_value_usd")


# d. Create heatmap
plt.figure(figsize=(12, 6))
sns.heatmap(
    heatmap_data,
    annot=True, fmt=".0f",
    cmap="RdYlGn",  # green for high, red for low
    cbar_kws={'label': 'Revenue Benchmark'}
)

plt.title("Product Name Revenue vs Overall Average Benchmark")
plt.ylabel("Product Name")
plt.xlabel("Year")
plt.show()


==================================================================================================
Business Question: Which products/categories are growing the fastest?
==================================================================================================

# Revenue by product & year
revenue_trends = (
    df_gold_fact_sales_orders.groupby(["year", "product_category"])["net_order_value_usd"]
    .sum()
    .reset_index()
    .sort_values(["product_category", "year"])
)

# Calculate YoY growth %
revenue_trends["yoy_growth"] = (
    revenue_trends.groupby("product_category")["net_order_value_usd"]
    .pct_change() * 100
)

# Create a flag for growth vs decline
revenue_trends["growth_flag"] = revenue_trends["yoy_growth"].apply(
    lambda x: "Growth" if x > 0 else ("Decline" if pd.notnull(x) else "N/A")
)

# Pivot for heatmap
pivot_table = revenue_trends.pivot(
    index="product_category",
    columns="year",
    values="yoy_growth"
)

# Plot heatmap
plt.figure(figsize=(12, 6))
sns.heatmap(pivot_table, annot=True, fmt=".1f", cmap="RdYlGn", center=0)
plt.title("YoY Growth (%) by Product Category and Year")
plt.ylabel("Product Category")
plt.xlabel("Year")
plt.show()


==================================================================================================
Business Question: Which products/names are growing the fastest?
==================================================================================================

# Revenue by product & year
revenue_trends = (
    df_gold_fact_sales_orders.groupby(["year", "product_name"])["net_order_value_usd"]
    .sum()
    .reset_index()
    .sort_values(["product_name", "year"])
)

# Calculate YoY growth %
revenue_trends["yoy_growth"] = (
    revenue_trends.groupby("product_name")["net_order_value_usd"]
    .pct_change() * 100
)

# Create a flag for growth vs decline
revenue_trends["growth_flag"] = revenue_trends["yoy_growth"].apply(
    lambda x: "Growth" if x > 0 else ("Decline" if pd.notnull(x) else "N/A")
)

# Pivot for heatmap
pivot_table = revenue_trends.pivot(
    index="product_name",
    columns="year",
    values="yoy_growth"
)

# Plot heatmap
plt.figure(figsize=(12, 6))
sns.heatmap(pivot_table, annot=True, fmt=".1f", cmap="RdYlGn", center=0)
plt.title("YoY Growth (%) by Product name and Year")
plt.ylabel("Product name")
plt.xlabel("Year")
plt.show()
