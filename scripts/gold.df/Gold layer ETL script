# =======================================================================================================
# ========================================= Gold Layer ETL ==============================================
# =======================================================================================================

Script Purpose:
    - Save consolidated Silver dataframes into a Silver folder (parquet format)
    - Create Gold Layer business-ready dataframes (dimensions and facts)
    - Apply business rules, data quality checks, and enrichment
    - Prepare data for reporting and analytics (Power BI, dashboards, KPIs)


# -------------------------------------------------------------------------------------------------------
# Imports
# -------------------------------------------------------------------------------------------------------
import os
import numpy as np
import pandas as pd

# -------------------------------------------------------------------------------------------------------
# Save Silver DataFrames as Parquet
# -------------------------------------------------------------------------------------------------------
BASE_PATH = r"C:\Users\sy\Downloads\Python & pbi\silver file"
os.makedirs(BASE_PATH, exist_ok=True)

df_silv_cust.to_parquet(os.path.join(BASE_PATH, "silver_customers.parquet"), index=False)
df_silv_prd.to_parquet(os.path.join(BASE_PATH, "silver_products.parquet"), index=False)
df_silv_str_prd.to_parquet(os.path.join(BASE_PATH, "silver_store_products.parquet"), index=False)
df_silv_str.to_parquet(os.path.join(BASE_PATH, "silver_store.parquet"), index=False)
df_silv_sls_prs.to_parquet(os.path.join(BASE_PATH, "silver_sales_person.parquet"), index=False)
df_silv_sls_ord.to_parquet(os.path.join(BASE_PATH, "silver_sales_order.parquet"), index=False)
df_silv_shp.to_parquet(os.path.join(BASE_PATH, "silver_ship.parquet"), index=False)

# -------------------------------------------------------------------------------------------------------
# GOLD LAYER CREATION (Dimensions + Facts)
# -------------------------------------------------------------------------------------------------------

# ==============================
# Customer Dimension
Objective:
## creating a data quality check flag
# ==============================
df_gold_dim_customers = df_silv_cust.copy()

## creating a data quality check flag
df_gold_dim_customers["data_quality_flag"] = np.where(
    df_gold_dim_customers["customer_id"].isnull() | df_gold_dim_customers["customer_name"].isnull(),
    "Invalid", "Valid")

# ==============================
# Product Dimension
Objective:
## creating a data quality check flag
# ==============================
df_gold_dim_products = df_silv_prd.copy()

## creating a data quality check flag
df_gold_dim_products["data_quality_flag"] = np.where(
    df_gold_dim_products["product_id"].isnull() | df_gold_dim_products["product_name"].isnull(),
    "Invalid", "Valid")

# ==============================
# Store-Product Fact
Objectives:
# create a store_product_key column
# business requirement: create a column that indicates 'stock is low' when unreserved_inventory 
for a product drops below 20
# creating a data quality check flag
# ==============================

df_gold_fact_store_products = df_silv_str_prd.copy()

# create a store_product_key column
df_gold_fact_store_products["store_product_key"] = (
    df_gold_fact_store_products["store_location_id"] + '-' + df_gold_fact_store_products["product_id"])

# business requirement: create a column that indicates 'stock is low' when unreserved_inventory 
for a product drops below 20
df_gold_fact_store_products["stock_replenish_flag"] = np.where(
    df_gold_fact_store_products["unreserved_inventory"] < 20, "Y", "N")

# creating a data quality check flag
df_gold_fact_store_products["data_quality_flag"] = np.where(
    df_gold_fact_store_products["store_location_id"].isnull() |
    df_gold_fact_store_products["product_id"].isnull(),
    "Invalid", "Valid")

# ==============================
# Store Dimension
Objective:
# creating a data quality check flag
# ==============================
df_gold_dim_store = df_silv_str.copy()

# creating a data quality check flag
df_gold_dim_store["data_quality_flag"] = np.where(
    df_gold_dim_store["store_location_id"].isnull(),
    "Invalid", "Valid")

# ==============================
# Sales Person Dimension
Objectives:
# create a column sales_person_store_key
# creating a data quality check flag
# ==============================
df_gold_dim_sales_person = df_silv_sls_prs.copy()

# create a column sales_person_store_key
df_gold_dim_sales_person["sales_person_store_key"] = (
    df_gold_dim_sales_person["sales_person_id"] + '-' + df_gold_dim_sales_person["store_location_id"])

# creating a data quality check flag
df_gold_dim_sales_person["data_quality_flag"] = np.where(
    df_gold_dim_sales_person["sales_person_id"].isnull() |
    df_gold_dim_sales_person["store_location_id"].isnull(),
    "Invalid", "Valid")

# ==============================
# Sales Order Fact
Objectives:
# retrieve customer, product and store information from df(df_gold_dim_customer, df_gold_dim_store,
df_gold_dim_products) using left join
# create a new column net_order_value_usd
# create a sales_orders_key: this concatenate order_id, product_id and store_location_id
# creating a data quality check flag
# ==============================
df_gold_fact_sales_order = df_silv_sls_ord.copy()

# retrieve customer, product and store information from df(df_gold_dim_customer, df_gold_dim_store,
df_gold_dim_products) using left join
df_joined_orders = (
    df_gold_fact_sales_order
    .merge(df_gold_dim_store[["store_location_id", "store_city", "store_address", "store_country"]],
           on="store_location_id", how="left")
    .merge(df_gold_dim_products[["product_id", "product_name", "product_category", "price_usd"]],
           on="product_id", how="left")
    .merge(df_gold_dim_customers[["customer_id", "customer_name"]],
           on="customer_id", how="left"))

# create a new column net_order_value
df_joined_orders["net_order_value_usd"] = (
    df_joined_orders["purchased_quantity"] * df_joined_orders["price_usd"])

# create a sales_orders_key: this concatenate order_id, product_id and store_location_id
df_joined_orders["sales_orders_key"] = (
    df_joined_orders["order_id"] + '-' +
    df_joined_orders["product_id"] + '-' +
    df_joined_orders["store_location_id"])

# creating a data quality check flag
df_joined_orders["data_quality_flag"] = np.where(
    df_joined_orders["order_id"].isnull() |
    df_joined_orders["product_id"].isnull() |
    df_joined_orders["customer_id"].isnull(),
    "Invalid", "Valid")

df_gold_fact_sales_orders = df_joined_orders

# ==============================
# Ship Fact
Objectives:
## retrieve customer and store information from df_gold_dim_customers using left join
## renaming columns to descriptive name
## creating column ship_key
## creating a data quality check flag
# ==============================
df_gold_fact_ship = df_silv_shp.copy()

## retrieve customer and store information from df_gold_dim_customers using left join
df_joined_ship = (
    df_gold_fact_ship
    .merge(df_gold_dim_store[["store_location_id", "store_city", "store_address", "store_country"]],
           on="store_location_id", how="left")
    .merge(df_gold_dim_customers[["customer_id", "customer_name",
                                  "customer_address", "customer_city", "customer_country"]],
           on="customer_id", how="left"))


## renaming columns to descriptive name
df_joined_ship = df_joined_ship.rename(columns={
    'store_city': 'ship_from_city',
    'store_address': 'ship_from_address',
    'store_country': 'ship_from_country',
    'customer_address': 'ship_to_address',
    'customer_city': 'ship_to_city',
    'customer_country': 'ship_to_country'})

## creating column ship_key
df_joined_ship["ship_key"] = (
    df_joined_ship["ship_id"] + '-' +
    df_joined_ship["order_id"] + '-' +
    df_joined_ship["customer_id"])

## creating a data quality check flag
df_joined_ship["data_quality_flag"] = np.where(
    df_joined_ship["ship_id"].isnull() |
    df_joined_ship["order_id"].isnull() |
    df_joined_ship["customer_id"].isnull(),
    "Invalid", "Valid")

df_gold_fact_ship = df_joined_ship
